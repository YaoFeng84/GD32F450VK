#ifndef DRI_USB_h
#define DRI_USB_h

#ifdef __cplusplus 
extern "C" { 
#endif 

#include "DRI_ComDriver.h"

/**
 * @brief
 *     P0Setup数据处理回调函数
 * @param  u8*  待处理数据首地址
 * @param  u16  待处理数据字节数
 * @param  u8*  返回数据首地址
 * @param  u16* 输入(返回数据空间字节数) 输出(实际返回/读取的字节数)
 * @return s8   小于0:表示处理错误
 *              等于0:表示命令未处理
 *                  1:表示命令已处理，需要将返回的数据通过P0端口发送给主机
 *                  2:表示命令已处理，需要将P0端口的OUT数据读取出来
 */
typedef s8(*DRI_USB_P0SetupProcessFunc)(u8*,u16,u8*,u16*);
typedef void(*DRI_USB_ReceDataFunc)(u8*,u16);
typedef s32(*DRI_USB_P0OutProcessFunc)(u8*,u16);//P0端口OUT数据的处理回调函数指针(OUT数据首地址,OUT数据字节数)返回值:实际处理字节数

typedef struct
{
     u8 IntPri;                    //中断优先级(0~15)
     DRI_USB_ReceDataFunc ReceDataFunc;//USB收到数据回调函数指针
     DRI_USB_P0SetupProcessFunc P0SetupProcess;//P0枚举处理回调函数指针
     DRI_USB_P0OutProcessFunc P0OutProcess;//P0端口OUT数据处理回调函数指针
}DRI_USBCnfType;

typedef struct
{
     u8 OutEP_Num;               //输出端点号
     u8 OutEP_Type;            //输出端点类型(0:控制端点 1:中断端点 2:批量端点 3:同步端点)
     u16 OutEP_MaxPacketSize;      //输出端点最大包字节数
     //
     u8 InEP_Num;                 //输入端点号
     u8 InEP_Type;             //输入端点类型(0:控制端点 1:中断端点 2:批量端点 3:同步端点)
     u16 InEP_MaxPacketSize;       //输入端点最大包字节数
     //
     u8 IntInEP_Num;             //中断输入端点号
     u8 IntInEP_Type;           //中断输入端点类型(0:控制端点 1:中断端点 2:批量端点 3:同步端点)
     u16 IntInEP_MaxPacketSize;    //中断输入端点最大包字节数
     //
     u8 P0EP_MaxPacketSize;        //P0端点最大包字节数
}DRI_USB_EPType;//USB的端点结构体

/***************************************************************************
* 函 数 名: DRI_USB_Config
* 功能描述：USB配置函数
* 入口参数：
            DRI_USBCnfType *cnfp:USB接口配置参数结构体指针
* 出口参数：
            -1:表示配置失败
            0:表示配置成功
* 注意事项:  
            无
* 例     如:
* 修改记录 :
          
*           2025-09-05 BY:
***************************************************************************/
extern s8 DRI_USB_Config(DRI_USBCnfType *cnfp);

/***************************************************************************
* 函 数 名: DRI_USB_Disconnect
* 功能描述：USB软断开函数
* 入口参数：
            
* 出口参数：
            无
* 注意事项:  
            无
* 例     如:
* 修改记录 :
          
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_Disconnect(void);

/***************************************************************************
* 函 数 名: DRI_USB_Connect
* 功能描述：USB软接入函数
* 入口参数：
            
* 出口参数：
            无
* 注意事项:  
            无
* 例     如:
* 修改记录 :
          
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_Connect(void);

/***************************************************************************
* 函 数 名: DRI_USB_ReConnect
* 功能描述：阻塞型 USB重拔插函数
* 入口参数：
            无
* 出口参数：
            无
* 注意事项:  
            无
* 例     如:
* 修改记录 :
          
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_ReConnect(void);

/***************************************************************************
* 函 数 名: DRI_USB_SendDataNonZPL
* 功能描述：阻塞型发送数据(有ZPL操作) 函数
* 入口参数：
            u8 *sd:待发数据首地址
            u16 sl:待发字节数
* 出口参数：
            返回值:小于0:发送失败
                  其他值:已发送字节数
* 注意事项:  
            不支持在接收回调中发送数据!!!
* 例     如:
* 修改记录 :

*           2025-09-05 BY:
***************************************************************************/
extern s32 DRI_USB_SendDataZPL(u8 *sd,u16 sl);

/***************************************************************************
* 函 数 名: DRI_USB_SendData
* 功能描述：阻塞型发送数据 函数
* 入口参数：
            u8 *sd:待发数据首地址
            u16 sl:待发字节数
* 出口参数：
            返回值:小于0:发送失败
                  其他值:已发送字节数
* 注意事项:  
            不支持在接收回调中发送数据!!!
            本函数无ZPL操作，当sl为端点最大包长的整数倍时，会发送不成功！！！
            需要上层根据情况再次调用本函数发送ZPL操作(ZPL操作即sl为0)
            【1】、CDC类、Print类，当sl为端点最大包长的整数倍时，需要紧接调用本函数来发送ZPL操作，不然在整数倍时，会发送不成功！！！非整数倍时，无需ZPL操作
            【2】、Storage类无需ZPL操作，不然会异常的！！
* 例     如:
* 修改记录 :

*           2025-09-05 BY:
***************************************************************************/
extern s32 DRI_USB_SendData(u8 *sd,u16 sl);

/***************************************************************************
* 函 数 名: DRI_USB_NonBlockSendData
* 功能描述：非阻塞型启动发送数据 函数
* 入口参数：
            u8 *sd:待发数据首地址
            u8 sl:待发字节数
* 出口参数：
            小于0:发送忙 或 失败
           其他值:已启动发送的字节数
* 注意事项:  
            不支持在接收回调中发送数据!!!
            本函数无ZPL操作，当sl为端点最大包长的整数倍时，会发送不成功！！！
            需要上层根据情况再次调用本函数发送ZPL操作(ZPL操作即sl为0)
            【1】、CDC类、Print类，当sl为端点最大包长的整数倍时，需要紧接调用本函数来发送ZPL操作，不然在整数倍时，会发送不成功！！！非整数倍时，无需ZPL操作
            【2】、Storage类无需ZPL操作，不然会异常的！！
            
            需配合DRI_USB_CheckNonBlockSendState函数来判断是否发送完成
* 例     如:
* 修改记录:
* 日期        版本        作者         说明
*           2025-09-05 BY:
***************************************************************************/
extern s32 DRI_USB_NonBlockSendData(u8 *sd,u16 sl);

/***************************************************************************
* 函 数 名: DRI_USB_CheckNonBlockSendState
* 功能描述：判断非阻塞型发送状态 函数
* 入口参数：
            无
* 出口参数：
            0：发送完成
          非0：发送未完成
* 注意事项:  
            
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern s8 DRI_USB_CheckNonBlockSendState(void);

/***************************************************************************
* 函 数 名: DRI_USB_SendData_INT
* 功能描述：阻塞型发送INT数据 函数
* 入口参数：
            u8 *sd:待发数据首地址
            u16 sl:待发字节数
* 出口参数：
            返回值:小于0:发送失败
                  其他值:已发送字节数
* 注意事项:  
            不支持在接收回调中发送数据!!!
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern s32 DRI_USB_SendData_INT(u8 *sd,u16 sl);

/***************************************************************************
* 函 数 名: DRI_USB_NonBlockSendData_INT
* 功能描述：非阻塞型启动发送INT数据 函数
* 入口参数：
            u8 *sd:待发数据首地址
            u8 sl:待发字节数
* 出口参数：
            小于0:发送忙 或 失败
           其他值:已启动发送的字节数
* 注意事项:  
            不支持在接收回调中发送数据!!!
            需配合DRI_USB_CheckNonBlockSendINTState函数来判断是否发送完成
* 例     如:
* 修改记录:
*           2025-09-05 BY:
***************************************************************************/
extern s32 DRI_USB_NonBlockSendData_INT(u8 *sd,u16 sl);

/***************************************************************************
* 函 数 名: DRI_USB_CheckNonBlockSendINTState
* 功能描述：判断非阻塞型发送INT状态 函数
* 入口参数：
            无
* 出口参数：
            0：发送完成
          非0：发送未完成
* 注意事项:  
            
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern s8 DRI_USB_CheckNonBlockSendINTState(void);

/***************************************************************************
* 函 数 名: DRI_USB_EnableReceive
* 功能描述：使能接收函数
* 入口参数：
            无
* 出口参数：
            无
* 注意事项:  
            无
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_EnableReceive(void);

/***************************************************************************
* 函 数 名: DRI_USB_DisableReceive
* 功能描述：禁止接收函数
* 入口参数：
            无
* 出口参数：
            无
* 注意事项:  
            无
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_DisableReceive(void);

/***************************************************************************
* 函 数 名: DRI_USB_OutEndPointInfo
* 功能描述：输出端点信息 函数
* 入口参数：
            DRI_USB_EPType *ep:存放端点信息的结构体指针
* 出口参数：
            无
* 注意事项:  
            
* 例     如:
* 修改记录 :
*           2025-09-05 BY:
***************************************************************************/
extern void DRI_USB_OutEndPointInfo(DRI_USB_EPType *ep);

#ifdef __cplusplus 
}
#endif 

#endif

